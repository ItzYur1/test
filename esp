local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "SMC Hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Yur1's Universal Hub",
   LoadingSubtitle = "by Abram Uri",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MTab = Window:CreateTab("ðŸ“‘ Misc", nil) --esp and xray and sht

-- ESP Script with Rayfield Toggle in Lua

local espEnabled = false  -- Toggle for ESP
local players = {}  -- Table to hold player data

-- Function to toggle ESP
local function toggleESP()
    espEnabled = not espEnabled
    if espEnabled then
        print("ESP Enabled")
    else
        print("ESP Disabled")
    end
end

-- Function to draw ESP
local function drawESP()
    if not espEnabled then return end

    for _, player in pairs(players) do
        local playerName = player.name
        local playerDistance = player.distance  -- Assuming distance is calculated elsewhere
        local screenPosition = player.screenPosition  -- Assuming you have a way to get screen position

        -- Draw the player's name and distance on the screen
        drawText(screenPosition.x, screenPosition.y, playerName .. " - " .. playerDistance .. "m", {r=0, g=255, b=0})  -- Green color
    end
end

-- Main loop
local function mainLoop()
    while true do
        -- Update players data (this is just a placeholder, implement your own logic)
        players = getPlayers()  -- Function to get current players in the game

        -- Draw ESP
        drawESP()

        -- Sleep or wait for a short duration to prevent high CPU usage
        wait(0.1)  -- Adjust the wait time as necessary
    end
end


-- Create a toggle button for ESP
local EToggle = MTab:CreateToggle({
    Name = "Toggle ESP",
    CurrentValue = espEnabled,
    Flag = "espToggle",  -- Unique flag for the toggle
    Callback = function(value)
        espEnabled = value
        if espEnabled then
            print("ESP Enabled")
        else
            print("ESP Disabled")
        end
    end,
})

-- Start the main loop
mainLoop()
